--FINAL PROJECT: ADVANCED SQL TECHNIQUES--

--SCENARIO--
You have to analyse the following datasets for the city of Chicago, as available on the Chicago City data portal.

Socioeconomic indicators in Chicago
Chicago public schools
Chicago crime data

--OBJECTIVES--
After completing this lab, you will be able to:

Use joins to query data from multiple tables

Create and query views

Write and run stored procedures

Use transactions

--SOFTWARE USED IN LAB--
MySQL

--EXERCISE 1: USING JOINS--
--Q1: Write and execute a SQL query to list the school names, community names and average attendance for communities with a hardship index of 98.--

SELECT CPS.NAME_OF_SCHOOL, CSD.COMMUNITY_AREA_NAME, CPS.AVERAGE_STUDENT_ATTENDANCE
FROM chicago_public_schools CPS
LEFT JOIN chicago_socioeconomic_data CSD
ON CPS.COMMUNITY_AREA_NAME = CSD.COMMUNITY_AREA_NAME
WHERE CSD.HARDSHIP_INDEX = 98;

--Q2: Write and execute a SQL query to list all crimes that took place at a school. Include case number, crime type and community name.--

SELECT CC.CASE_NUMBER, CC.PRIMARY_TYPE, CSD.COMMUNITY_AREA_NUMBER
FROM chicago_crime CC
LEFT JOIN chicago_socioeconomic_data CSD
ON CC.COMMUNITY_AREA_NUMBER = CSD.COMMUNITY_AREA_NUMBER
WHERE CC.LOCATION_DESCRIPTION LIKE '%SCHOOL%';

--EXERCISE 2: CREATING A VIEW--
--Q1:Write and execute a SQL statement to create a view showing the columns listed in the following table, with new column names as shown in the second column.--
+-------------------------------------------+---------------------+
| Column name in CHICAGO_PUBLIC_SCHOOLS     | Column name in view |
+-------------------------------------------+---------------------+
|  NAME_OF_SCHOOL	                    | School_Name         |
|  Safety_Icon	                            | Safety_Rating       |
|  Family_Involvement_Icon                  | Family_Rating       |
|  Environment_Icon	                    | Environment_Rating  |
|  Instruction_Icon	                    | Instruction_Rating  |
|  Leaders_Icon	                            | Leaders_Rating      |
|  Teachers_Icon	                    | Teachers_Rating     |
+-------------------------------------------+---------------------+

CREATE VIEW CPS_VIEW (School_Name, Safety_Rating, Family_Rating, Environment_Rating, 
Instruction_Rating, Leaders_Rating, Teachers_Rating) AS
SELECT NAME_OF_SCHOOL, Safety_Icon, Family_Involvement_Icon, Environment_Icon,
Instruction_Icon, Leaders_Icon, Teachers_Icon
FROM chicago_public_schools;

--Q1.1: Write and execute a SQL statement that returns all of the columns from the view.--

SELECT * FROM CPS_VIEW;

--Q1.2: Write and execute a SQL statement that returns just the school name and leaders rating from the view.--

SELECT School_Name, Leaders_Rating
FROM CPS_VIEW;

--EXERCISE 3: CREATING A STORED PROCEDURE-- 
--Q1: Write the structure of a query to create or replace a stored procedure called UPDATE_LEADERS_SCORE that takes a in_School_ID parameter as an integer and a in_Leader_Score parameter as an integer.--
--&--
--Q2: Inside your stored procedure, write a SQL statement to update the Leaders_Score field in the CHICAGO_PUBLIC_SCHOOLS table for the school identified by in_School_ID to the value in the in_Leader_Score parameter.

DELIMETER //
CREATE PROCEDURE UPDATE_LEADERS_SCORE (IN in_School_ID INT, IN in_Leader_Score INT)
BEGIN
    UPDATE chicago_public_schools
    SET Leaders_Score = in_Leader_Score
    WHERE School_ID = in_School_ID
END //
DELIMITER;

--Q3: Inside your stored procedure, write a SQL IF statement to update the Leaders_Icon field in the CHICAGO_PUBLIC_SCHOOLS table for the school identified by in_School_ID using the following information.--

DELIMETER //
CREATE PROCEDURE UPDATE_LEADERS_SCORE (IN in_School_ID INT, IN in_Leader_Score INT)
BEGIN
    UPDATE chicago_public_schools
    SET Leaders_Score = in_Leader_Score
    WHERE School_ID = in_School_ID
    
    IF in_Leaders_Score > 0 AND in_Leaders_Score < 20 THEN
		  UPDATE CHICAGO_PUBLIC_SCHOOLS
		  SET "Leaders_Icon" = 'Very_weak'
		  WHERE "School_ID" = in_School_ID;

	 ELSEIF in_Leaders_Score < 40 THEN
		  UPDATE CHICAGO_PUBLIC_SCHOOLS
		  SET "Leaders_Icon" = 'Weak'
		  WHERE "School_ID" = in_School_ID;

	 ELSEIF in_Leaders_Score < 60 THEN
		  UPDATE CHICAGO_PUBLIC_SCHOOLS
		  SET "Leaders_Icon" = 'Average'
		  WHERE "School_ID" = in_School_ID;

	 ELSEIF in_Leaders_Score < 80 THEN
		  UPDATE CHICAGO_PUBLIC_SCHOOLS
		  SET "Leaders_Icon" = 'Strong'
		  WHERE "School_ID" = in_School_ID;

	 ELSEIF in_Leaders_Score < 100 THEN
		  UPDATE CHICAGO_PUBLIC_SCHOOLS
		  SET "Leaders_Icon" = 'Very_strong'
		  WHERE "School_ID" = in_School_ID;
   END IF;
END //
DELIMITER;

--EXERCISE 4: USING TRANSACTIONS--
--Q1: Update your stored procedure definition. Add a generic ELSE clause to the IF statement that rolls back the current work if the score did not fit any of the preceding categories.--
--&--
--Q2: Update your stored procedure definition again. Add a statement to commit the current unit of work at the end of the procedure.--

DELIMETER //
CREATE PROCEDURE UPDATE_LEADERS_SCORE (IN in_School_ID INT, IN in_Leader_Score INT)
BEGIN
    START TRANSACTION;
    UPDATE chicago_public_schools
    SET Leaders_Score = in_Leader_Score
    WHERE School_ID = in_School_ID
    
    IF in_Leaders_Score > 0 AND in_Leaders_Score < 20 THEN
		  UPDATE CHICAGO_PUBLIC_SCHOOLS
		  SET "Leaders_Icon" = 'Very_weak'
		  WHERE "School_ID" = in_School_ID;

	 ELSEIF in_Leaders_Score < 40 THEN
		  UPDATE CHICAGO_PUBLIC_SCHOOLS
		  SET "Leaders_Icon" = 'Weak'
		  WHERE "School_ID" = in_School_ID;

	 ELSEIF in_Leaders_Score < 60 THEN
		  UPDATE CHICAGO_PUBLIC_SCHOOLS
		  SET "Leaders_Icon" = 'Average'
		  WHERE "School_ID" = in_School_ID;

	 ELSEIF in_Leaders_Score < 80 THEN
		  UPDATE CHICAGO_PUBLIC_SCHOOLS
		  SET "Leaders_Icon" = 'Strong'
		  WHERE "School_ID" = in_School_ID;

	 ELSEIF in_Leaders_Score < 100 THEN
		  UPDATE CHICAGO_PUBLIC_SCHOOLS
		  SET "Leaders_Icon" = 'Very_strong'
		  WHERE "School_ID" = in_School_ID;
   ELSE
      ROLLBACK;
   END IF;
   COMMIT;
END //
DELIMITER;
